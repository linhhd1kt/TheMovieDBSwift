//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `Launch Screen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Launch Screen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 29 colors.
  struct color {
    /// Color `MainColor`.
    static let mainColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "MainColor")
    /// Color `background`.
    static let background = Rswift.ColorResource(bundle: R.hostingBundle, name: "background")
    /// Color `error-container`.
    static let errorContainer = Rswift.ColorResource(bundle: R.hostingBundle, name: "error-container")
    /// Color `error`.
    static let error = Rswift.ColorResource(bundle: R.hostingBundle, name: "error")
    /// Color `inverse-on-surface`.
    static let inverseOnSurface = Rswift.ColorResource(bundle: R.hostingBundle, name: "inverse-on-surface")
    /// Color `inverse-primary`.
    static let inversePrimary = Rswift.ColorResource(bundle: R.hostingBundle, name: "inverse-primary")
    /// Color `inverse-surface`.
    static let inverseSurface = Rswift.ColorResource(bundle: R.hostingBundle, name: "inverse-surface")
    /// Color `on-background`.
    static let onBackground = Rswift.ColorResource(bundle: R.hostingBundle, name: "on-background")
    /// Color `on-error-container`.
    static let onErrorContainer = Rswift.ColorResource(bundle: R.hostingBundle, name: "on-error-container")
    /// Color `on-error`.
    static let onError = Rswift.ColorResource(bundle: R.hostingBundle, name: "on-error")
    /// Color `on-primary-container`.
    static let onPrimaryContainer = Rswift.ColorResource(bundle: R.hostingBundle, name: "on-primary-container")
    /// Color `on-primary`.
    static let onPrimary = Rswift.ColorResource(bundle: R.hostingBundle, name: "on-primary")
    /// Color `on-secondary-container`.
    static let onSecondaryContainer = Rswift.ColorResource(bundle: R.hostingBundle, name: "on-secondary-container")
    /// Color `on-secondary`.
    static let onSecondary = Rswift.ColorResource(bundle: R.hostingBundle, name: "on-secondary")
    /// Color `on-surface-variant`.
    static let onSurfaceVariant = Rswift.ColorResource(bundle: R.hostingBundle, name: "on-surface-variant")
    /// Color `on-surface`.
    static let onSurface = Rswift.ColorResource(bundle: R.hostingBundle, name: "on-surface")
    /// Color `on-ternary-container`.
    static let onTernaryContainer = Rswift.ColorResource(bundle: R.hostingBundle, name: "on-ternary-container")
    /// Color `on-ternary`.
    static let onTernary = Rswift.ColorResource(bundle: R.hostingBundle, name: "on-ternary")
    /// Color `outline`.
    static let outline = Rswift.ColorResource(bundle: R.hostingBundle, name: "outline")
    /// Color `primary-container`.
    static let primaryContainer = Rswift.ColorResource(bundle: R.hostingBundle, name: "primary-container")
    /// Color `primary`.
    static let primary = Rswift.ColorResource(bundle: R.hostingBundle, name: "primary")
    /// Color `secondary-container`.
    static let secondaryContainer = Rswift.ColorResource(bundle: R.hostingBundle, name: "secondary-container")
    /// Color `secondary`.
    static let secondary = Rswift.ColorResource(bundle: R.hostingBundle, name: "secondary")
    /// Color `shadow`.
    static let shadow = Rswift.ColorResource(bundle: R.hostingBundle, name: "shadow")
    /// Color `surface-tint`.
    static let surfaceTint = Rswift.ColorResource(bundle: R.hostingBundle, name: "surface-tint")
    /// Color `surface-variant`.
    static let surfaceVariant = Rswift.ColorResource(bundle: R.hostingBundle, name: "surface-variant")
    /// Color `surface`.
    static let surface = Rswift.ColorResource(bundle: R.hostingBundle, name: "surface")
    /// Color `ternary-container`.
    static let ternaryContainer = Rswift.ColorResource(bundle: R.hostingBundle, name: "ternary-container")
    /// Color `ternary`.
    static let ternary = Rswift.ColorResource(bundle: R.hostingBundle, name: "ternary")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "MainColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func mainColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.mainColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "background", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.background, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "error", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func error(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.error, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "error-container", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func errorContainer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.errorContainer, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "inverse-on-surface", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func inverseOnSurface(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.inverseOnSurface, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "inverse-primary", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func inversePrimary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.inversePrimary, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "inverse-surface", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func inverseSurface(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.inverseSurface, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "on-background", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func onBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.onBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "on-error", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func onError(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.onError, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "on-error-container", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func onErrorContainer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.onErrorContainer, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "on-primary", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func onPrimary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.onPrimary, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "on-primary-container", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func onPrimaryContainer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.onPrimaryContainer, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "on-secondary", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func onSecondary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.onSecondary, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "on-secondary-container", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func onSecondaryContainer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.onSecondaryContainer, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "on-surface", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func onSurface(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.onSurface, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "on-surface-variant", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func onSurfaceVariant(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.onSurfaceVariant, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "on-ternary", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func onTernary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.onTernary, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "on-ternary-container", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func onTernaryContainer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.onTernaryContainer, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "outline", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func outline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.outline, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "primary", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func primary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.primary, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "primary-container", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func primaryContainer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.primaryContainer, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "secondary", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func secondary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.secondary, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "secondary-container", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func secondaryContainer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.secondaryContainer, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "shadow", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func shadow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.shadow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "surface", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func surface(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.surface, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "surface-tint", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func surfaceTint(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.surfaceTint, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "surface-variant", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func surfaceVariant(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.surfaceVariant, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "ternary", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func ternary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.ternary, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "ternary-container", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func ternaryContainer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.ternaryContainer, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "MainColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func mainColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.mainColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "background", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func background(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.background.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "error", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func error(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.error.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "error-container", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func errorContainer(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.errorContainer.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "inverse-on-surface", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func inverseOnSurface(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.inverseOnSurface.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "inverse-primary", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func inversePrimary(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.inversePrimary.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "inverse-surface", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func inverseSurface(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.inverseSurface.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "on-background", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func onBackground(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.onBackground.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "on-error", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func onError(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.onError.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "on-error-container", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func onErrorContainer(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.onErrorContainer.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "on-primary", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func onPrimary(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.onPrimary.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "on-primary-container", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func onPrimaryContainer(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.onPrimaryContainer.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "on-secondary", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func onSecondary(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.onSecondary.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "on-secondary-container", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func onSecondaryContainer(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.onSecondaryContainer.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "on-surface", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func onSurface(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.onSurface.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "on-surface-variant", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func onSurfaceVariant(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.onSurfaceVariant.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "on-ternary", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func onTernary(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.onTernary.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "on-ternary-container", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func onTernaryContainer(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.onTernaryContainer.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "outline", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func outline(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.outline.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "primary", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func primary(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.primary.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "primary-container", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func primaryContainer(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.primaryContainer.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "secondary", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func secondary(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.secondary.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "secondary-container", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func secondaryContainer(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.secondaryContainer.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "shadow", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func shadow(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.shadow.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "surface", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func surface(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.surface.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "surface-tint", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func surfaceTint(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.surfaceTint.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "surface-variant", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func surfaceVariant(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.surfaceVariant.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "ternary", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func ternary(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.ternary.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "ternary-container", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func ternaryContainer(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.ternaryContainer.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `.swiftlint.yml`.
    static let swiftlintYml = Rswift.FileResource(bundle: R.hostingBundle, name: ".swiftlint", pathExtension: "yml")

    /// `bundle.url(forResource: ".swiftlint", withExtension: "yml")`
    static func swiftlintYml(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.swiftlintYml
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 5 images.
  struct image {
    /// Image `bg-header`.
    static let bgHeader = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg-header")
    /// Image `ic-logo`.
    static let icLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-logo")
    /// Image `ic-menu`.
    static let icMenu = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-menu")
    /// Image `ic-profile`.
    static let icProfile = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-profile")
    /// Image `ic-search`.
    static let icSearch = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-search")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg-header", bundle: ..., traitCollection: ...)`
    static func bgHeader(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bgHeader, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic-logo", bundle: ..., traitCollection: ...)`
    static func icLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icLogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic-menu", bundle: ..., traitCollection: ...)`
    static func icMenu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icMenu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic-profile", bundle: ..., traitCollection: ...)`
    static func icProfile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icProfile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic-search", bundle: ..., traitCollection: ...)`
    static func icSearch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icSearch, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct `default` {
            static let _key = "default"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "default"], key: "UISceneConfigurationName") ?? "default"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "default"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 13 nibs.
  struct nib {
    /// Nib `CategoryDropdownCell`.
    static let categoryDropdownCell = _R.nib._CategoryDropdownCell()
    /// Nib `CircleView`.
    static let circleView = _R.nib._CircleView()
    /// Nib `DashboardViewController`.
    static let dashboardViewController = _R.nib._DashboardViewController()
    /// Nib `DrawerMenuCell`.
    static let drawerMenuCell = _R.nib._DrawerMenuCell()
    /// Nib `DrawerMenuViewController`.
    static let drawerMenuViewController = _R.nib._DrawerMenuViewController()
    /// Nib `Input`.
    static let input = _R.nib._Input()
    /// Nib `ItemSessionView`.
    static let itemSessionView = _R.nib._ItemSessionView()
    /// Nib `LoginViewController`.
    static let loginViewController = _R.nib._LoginViewController()
    /// Nib `MovieCollectionCell`.
    static let movieCollectionCell = _R.nib._MovieCollectionCell()
    /// Nib `MovieListViewController`.
    static let movieListViewController = _R.nib._MovieListViewController()
    /// Nib `MovieTableCell`.
    static let movieTableCell = _R.nib._MovieTableCell()
    /// Nib `RoundedSearchView`.
    static let roundedSearchView = _R.nib._RoundedSearchView()
    /// Nib `SelectedCategoryDropdownCell`.
    static let selectedCategoryDropdownCell = _R.nib._SelectedCategoryDropdownCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CategoryDropdownCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.categoryDropdownCell) instead")
    static func categoryDropdownCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.categoryDropdownCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CircleView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.circleView) instead")
    static func circleView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.circleView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DashboardViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.dashboardViewController) instead")
    static func dashboardViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.dashboardViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DrawerMenuCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.drawerMenuCell) instead")
    static func drawerMenuCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.drawerMenuCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DrawerMenuViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.drawerMenuViewController) instead")
    static func drawerMenuViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.drawerMenuViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "Input", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.input) instead")
    static func input(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.input)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ItemSessionView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.itemSessionView) instead")
    static func itemSessionView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.itemSessionView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "LoginViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.loginViewController) instead")
    static func loginViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.loginViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MovieCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.movieCollectionCell) instead")
    static func movieCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.movieCollectionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MovieListViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.movieListViewController) instead")
    static func movieListViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.movieListViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MovieTableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.movieTableCell) instead")
    static func movieTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.movieTableCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "RoundedSearchView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.roundedSearchView) instead")
    static func roundedSearchView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.roundedSearchView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SelectedCategoryDropdownCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.selectedCategoryDropdownCell) instead")
    static func selectedCategoryDropdownCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.selectedCategoryDropdownCell)
    }
    #endif

    static func categoryDropdownCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CategoryDropdownCell? {
      return R.nib.categoryDropdownCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CategoryDropdownCell
    }

    static func circleView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.circleView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func dashboardViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.dashboardViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func drawerMenuCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DrawerMenuCell? {
      return R.nib.drawerMenuCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DrawerMenuCell
    }

    static func drawerMenuViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.drawerMenuViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func input(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.input.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func itemSessionView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.itemSessionView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func loginViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.loginViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func movieCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MovieCollectionCell? {
      return R.nib.movieCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MovieCollectionCell
    }

    static func movieListViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.movieListViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func movieTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MovieTableCell? {
      return R.nib.movieTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MovieTableCell
    }

    static func roundedSearchView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.roundedSearchView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func selectedCategoryDropdownCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SelectedCategoryDropdownCell? {
      return R.nib.selectedCategoryDropdownCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SelectedCategoryDropdownCell
    }

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 8 localization keys.
    struct localizable {
      /// en translation: Error
      ///
      /// Locales: en, ja
      static let error = Rswift.StringResource(key: "error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Failed loading movies
      ///
      /// Locales: en, ja
      static let failedLoadingMovies = Rswift.StringResource(key: "failed-loading-movies", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Movies
      ///
      /// Locales: en, ja
      static let movie = Rswift.StringResource(key: "movie", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: No internet connection
      ///
      /// Locales: en, ja
      static let noInternetConnection = Rswift.StringResource(key: "no-internet-connection", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Release Date
      ///
      /// Locales: en, ja
      static let releaseDate = Rswift.StringResource(key: "release-date", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Search Movies
      ///
      /// Locales: en, ja
      static let searchMovies = Rswift.StringResource(key: "search-movies", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: Search results
      ///
      /// Locales: en, ja
      static let searchResult = Rswift.StringResource(key: "search-result", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)
      /// en translation: To be announced
      ///
      /// Locales: en, ja
      static let toBeAnnounced = Rswift.StringResource(key: "to-be-announced", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)

      /// en translation: Error
      ///
      /// Locales: en, ja
      static func error(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error"
        }

        return NSLocalizedString("error", bundle: bundle, comment: "")
      }

      /// en translation: Failed loading movies
      ///
      /// Locales: en, ja
      static func failedLoadingMovies(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("failed-loading-movies", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "failed-loading-movies"
        }

        return NSLocalizedString("failed-loading-movies", bundle: bundle, comment: "")
      }

      /// en translation: Movies
      ///
      /// Locales: en, ja
      static func movie(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("movie", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "movie"
        }

        return NSLocalizedString("movie", bundle: bundle, comment: "")
      }

      /// en translation: No internet connection
      ///
      /// Locales: en, ja
      static func noInternetConnection(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("no-internet-connection", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "no-internet-connection"
        }

        return NSLocalizedString("no-internet-connection", bundle: bundle, comment: "")
      }

      /// en translation: Release Date
      ///
      /// Locales: en, ja
      static func releaseDate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("release-date", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "release-date"
        }

        return NSLocalizedString("release-date", bundle: bundle, comment: "")
      }

      /// en translation: Search Movies
      ///
      /// Locales: en, ja
      static func searchMovies(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("search-movies", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "search-movies"
        }

        return NSLocalizedString("search-movies", bundle: bundle, comment: "")
      }

      /// en translation: Search results
      ///
      /// Locales: en, ja
      static func searchResult(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("search-result", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "search-result"
        }

        return NSLocalizedString("search-result", bundle: bundle, comment: "")
      }

      /// en translation: To be announced
      ///
      /// Locales: en, ja
      static func toBeAnnounced(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("to-be-announced", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "to-be-announced"
        }

        return NSLocalizedString("to-be-announced", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _DashboardViewController.validate()
      try _SelectedCategoryDropdownCell.validate()
    }

    struct _CategoryDropdownCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CategoryDropdownCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CategoryDropdownCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CategoryDropdownCell
      }

      fileprivate init() {}
    }

    struct _CircleView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CircleView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _DashboardViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "DashboardViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "bg-header", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg-header' is used in nib 'DashboardViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'background' is used in nib 'DashboardViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "on-primary-container", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'on-primary-container' is used in nib 'DashboardViewController', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _DrawerMenuCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DrawerMenuCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DrawerMenuCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DrawerMenuCell
      }

      fileprivate init() {}
    }

    struct _DrawerMenuViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DrawerMenuViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _Input: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "Input"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _ItemSessionView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ItemSessionView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _LoginViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "LoginViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _MovieCollectionCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MovieCollectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MovieCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MovieCollectionCell
      }

      fileprivate init() {}
    }

    struct _MovieListViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MovieListViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _MovieTableCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MovieTableCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MovieTableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MovieTableCell
      }

      fileprivate init() {}
    }

    struct _RoundedSearchView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "RoundedSearchView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _SelectedCategoryDropdownCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SelectedCategoryDropdownCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SelectedCategoryDropdownCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SelectedCategoryDropdownCell
      }

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "chevron.down") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'chevron.down' is used in nib 'SelectedCategoryDropdownCell', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "on-secondary", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'on-secondary' is used in nib 'SelectedCategoryDropdownCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "on-ternary", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'on-ternary' is used in nib 'SelectedCategoryDropdownCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "ternary", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'ternary' is used in nib 'SelectedCategoryDropdownCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "Launch Screen"

      static func validate() throws {
        if UIKit.UIImage(named: "ic-logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic-logo' is used in storyboard 'Launch Screen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "primary", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'primary' is used in storyboard 'Launch Screen', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
